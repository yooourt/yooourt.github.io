con ensure = function(condition, message){
    if(condition) {
        log('测试成功11')
    } else {
        log('测试失败22', message)
    }
}
con isArray = function(o) {
    return type([]) == type(o)
}

con isMap = function(o) {
    return type({}) == type(o)
}

// con equals = function(list1, list2) {
//     // 第三题实现的 equal 函数
// }
con equals = function(a, b) {
    // 1. 如果 a 和 b 都是数组, 就参考 arrayDeepEquals 的方式来判断
        // 1.1 如果 a.length 与 b.length 不相等, 返回 false
        // 1.2 遍历数组 a, 用 equals 判断两个数组遍历出来的元素
        // 1.3 如果判断出来的结果不相等, 返回 false
        // 1.4 如果数组遍历结束都没有返回 false, 那么直接返回 true
    // 2. 如果 a 和 b 都是字典, 就参考 mapDeepEquals 的方式来判断
        // 2.1 如果字典 a 与 字典 b 的 key 长度不一样, 返回 false
        // 2.2 遍历字典 a, 用 equals 判断两个字典遍历出来的值
        // 2.3 如果判断出来的结果不相等, 返回 false
        // 2.4 如果字典遍历结束都没有返回 false, 那么直接返回 true
    // 3. 否则, 直接判断 a 与 b 是否相等

    if (isArray(a) and isArray(b)) {
        if (a.length() != b.length()) {
            return false
        }
        for (var i = 0; i < a.length(); i += 1) {
            if (not equals(a[i], b[i])) {
                return false
            }
        }
        return true
    } else if (isMap(a) and isMap(b)) {
        var aKeys = a.keys()
        var bKyes = b.keys()

        if (aKeys.length() != bKyes.length()) {
            return false
        }

        for (var i = 0; i < aKeys.length(); i += 1) {
            var k = aKeys[i]
            var v1 = a[k]
            var v2 = b[k]
            if (not equals(v1, v2)) {
                return false
            }
        }
        return true
    } else {
        return a == b
    }
}


con objectClone = function(object) {
    // clone 一个字典并且返回
    // 注意, 要求实现浅拷贝

    var keys = object.keys()
    var copy = {}
    for (var i = 0; i < keys.length(); i += 1) {
        var k = keys[i]
        copy[k] = object[k]
    }
    return copy
}

con testObjectClone = function() {
    var a1 = {
        x: 1,
    }
    var b1 = objectClone(a1)
    ensure(equals(a1, b1), 'test object clone 1')
    a1.y = 100
    ensure(not b1.has('y'), 'test object clone 2')

    var a2 = {
        x: 1,
        y: {},
    }
    var b2 = objectClone(a2)
    ensure(equals(a2, b2), 'test object clone 3')
    b2.y.z = 200
    ensure(a2.y.z == 200, 'test object clone 4')
}

con objectDeepClone = function(object) {
    // clone 一个数组并且返回
    // 注意, 要求实现深拷贝

    // 新建一个空字典 o
    // 遍历 object 得到 key 和 value
    // 如果 value 是字典, 递归调用 objectDeepClone 函数并把 value 作为参数, 将得到的返回值添加到 o 中, 作为 key 对应的 value
    // 如果 value 不是字典, 直接把 value 作为 key 的值

    var copy = {}
    var keys = object.keys()
    for (var i = 0; i < keys.length(); i += 1) {
        var k = keys[i]
        var v = object[k]
        if (isMap(v)) {
            var t = objectDeepClone(v)
            copy[k] = t
        } else {
            copy[k] = v
        }
    }

    return copy

}

con testObjectDeepClone = function() {
    var a1 = {
        x: 1,
        y: 2,
    }
    var b1 = objectDeepClone(a1)
    ensure(equals(a1, b1), 'test object deep clone 1')
    a1.y = 100
    ensure(b1.y == 2 and a1.y == 100, 'test object deep clone 2')

    var a2 = {
        x: 1,
        y: {},
    }
    var b2 = objectDeepClone(a2)
    ensure(equals(a2, b2), 'test object deep clone 3')
    b2.y.z = 200
    ensure(equals(a2.y, {}) and b2.y.z == 200, 'test object deep clone 4')
}

con __main = function() {
    testObjectClone()
    testObjectDeepClone()
}
